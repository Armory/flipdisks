// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/snake/snake.go

// Package snake is a generated GoMock package.
package snake

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mocksnaker is a mock of snaker interface
type Mocksnaker struct {
	ctrl     *gomock.Controller
	recorder *MocksnakerMockRecorder
}

// MocksnakerMockRecorder is the mock recorder for Mocksnaker
type MocksnakerMockRecorder struct {
	mock *Mocksnaker
}

// NewMocksnaker creates a new mock instance
func NewMocksnaker(ctrl *gomock.Controller) *Mocksnaker {
	mock := &Mocksnaker{ctrl: ctrl}
	mock.recorder = &MocksnakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocksnaker) EXPECT() *MocksnakerMockRecorder {
	return m.recorder
}

// nextHeadLoc mocks base method
func (m *Mocksnaker) nextHeadLoc() mapPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nextHeadLoc")
	ret0, _ := ret[0].(mapPoint)
	return ret0
}

// nextHeadLoc indicates an expected call of nextHeadLoc
func (mr *MocksnakerMockRecorder) nextHeadLoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nextHeadLoc", reflect.TypeOf((*Mocksnaker)(nil).nextHeadLoc))
}

// eggNextLoc mocks base method
func (m *Mocksnaker) eggNextLoc() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "eggNextLoc")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// eggNextLoc indicates an expected call of eggNextLoc
func (mr *MocksnakerMockRecorder) eggNextLoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "eggNextLoc", reflect.TypeOf((*Mocksnaker)(nil).eggNextLoc))
}
